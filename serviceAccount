const serviceAccount = cluster.addServiceAccount('MyServiceAccount', {
  name: 's3-access-service-account',
  namespace: 'default',
});
serviceAccount.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonS3FullAccess'))


apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-cli
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aws-cli
  template:
    metadata:
      labels:
        app: aws-cli
    spec:
      serviceAccountName: s3-access-service-account
      containers:
      - name: aws-cli
        image: amazon/aws-cli:latest
        command: ["/bin/sleep"]
        args: ["1000000"]

---
      engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL, // PostgreSQL エンジンを使用
      parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql11'),



---


FROM ghcr.io/mlflow/mlflow:latest

RUN apt-get update && apt-get install -y gcc libpq-dev
RUN pip install psycopg2 boto3

---

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: mlflow-secrets
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "secret"
        objectType: "secretsmanager"
        jmesPath:
          - path: "username"
            objectAlias: "username"
          - path: "password"
            objectAlias: "password"
          - path: "host"
            objectAlias: "host"

---

    spec:
      serviceAccountName: mlflow-service-account
      volumes:
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "mlflow-secrets"

      containers:
      - name: mlflow-server               
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true

---
    cluster.addHelmChart('SecretsStoreCsiDriver', {
      repository: 'https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts',
      chart: 'secrets-store-csi-driver',
      namespace: 'kube-system',
      release: 'csi-secrets-store',
    });
    
    const manifestFilePath = '/home/user/work/eks/aws-provider-installer.yaml';
    const manifestContent = fs.readFileSync(manifestFilePath, 'utf8');
    const manifests = yaml.loadAll(manifestContent);
    
    manifests.forEach((manifest, index) => {
      cluster.addManifest(`AwsProvider${index}`, manifest as Record<string, any>);
    });
